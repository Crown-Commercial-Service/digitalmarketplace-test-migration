#!/usr/bin/env python
"""
Output a file containing the full, frozen dependencies of a requirements file.

This will error out on the pip
    > Requirement file x contains y, but that package is not installed...
error caused by `pip install` being case insensitive and the `pip freeze` command being case sensitive.

Usage:
    freeze-requirements <target>
    freeze-requirements <target> [options]

Options:
    <target>             A requirements file for us to freeze
    --outfile=<outfile>  Output file for frozen requirement values [default: requirements.txt]
    --verbose
    -h, --help           Show this screen

Examples:
    python -m dmutils.repoutils.freeze-requirements requirements-app.txt
    freeze-requirements.py requirements-app.txt --verbose
    python -m dmutils.repoutils.freeze-requirements requirements-app.txt --outfile=not-requirements.txt --verbose
"""
import logging
import re
import shutil
import subprocess
import venv

from docopt import docopt


logger = logging.getLogger('freeze-requirements')


def make_clean(virtualenv_name):
    try:
        logger.info(f'Removing {virtualenv_name}')
        shutil.rmtree(virtualenv_name)
    except FileNotFoundError:
        pass


def exit_failure(messages, code=1):
    for message in messages:
        logger.error(message.decode('utf-8'))
    exit(code)


if __name__ == '__main__':
    arguments = docopt(__doc__)
    target = arguments['<target>']
    outfile = arguments['--outfile']
    virtualenv_name = 'venv-freeze'
    logging.basicConfig(level=logging.WARNING if not arguments['--verbose'] else logging.DEBUG)

    make_clean(virtualenv_name)

    logger.info(f'Creating virtualenv: {virtualenv_name}')
    venv.main(args=(virtualenv_name,))

    logger.info(f'Installing requirements from {target} in virtualenv: {virtualenv_name}')
    install_cmd = subprocess.Popen(
        [f'{virtualenv_name}/bin/pip', 'install', '-r', target],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE
    )
    stdout, stderr = install_cmd.communicate()
    if install_cmd.poll() >= 1:
        make_clean(virtualenv_name)
        exit_failure([stdout, stderr])

    logger.info(f'Freezing installed requirements in virtualenv: {virtualenv_name}')
    freeze_cmd = subprocess.Popen(
        [f'{virtualenv_name}/bin/pip', 'freeze', '-r', target],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE
    )
    stdout, stderr = freeze_cmd.communicate()
    if freeze_cmd.poll() >= 1:
        make_clean(virtualenv_name)
        exit_failure([stdout, stderr])

    # Check for case mismatch error
    case_error = re.findall('Requirement file \[.+?\] contains (.+?), but that package is not installed', str(stderr))
    if case_error:
        make_clean(virtualenv_name)
        exit_failure(
            [
                f'Possible case mismatch between installed name and package name detected for {requirement}'
                for requirement in case_error
            ] + [stderr, stdout]
        )

    logger.info(f'Constructing new requirements file: {outfile} from frozen environment: {virtualenv_name}')
    with open(target) as requirements_file, open(outfile, 'w') as freeze_file:
        lines = (
            '# This file is autogenerated. Do not edit it manually.\n',
            *[i for i in requirements_file.readlines() if not i.startswith('--')],
            '\n',
            re.search(
                '## The following requirements were added by pip freeze:.+',
                stdout.decode("utf-8"),
                re.MULTILINE + re.DOTALL
            ).group()
        )
        freeze_file.writelines(lines)

    make_clean(virtualenv_name)

    exit(0)
